datasource db {  
  provider = "mysql"  
  url      = env("DATABASE_URL")  
}  
  
generator client {  
  provider = "prisma-client-js"  
}  
  
enum UserRole {  
  STUDENT  
  TEACHER  
}  
  
model User {  
  id            Int          @id @default(autoincrement())  
  username      String       @unique @db.VarChar(50)  
  email         String       @unique @db.VarChar(100)  
  password      String       @db.VarChar(255)  
  firstName     String?      @db.VarChar(50)  
  lastName      String?      @db.VarChar(50)  
  phone         String?      @db.VarChar(20)  
  description   String?      @db.Text  
  profileImage  String?      @db.VarChar(255)  
  role          UserRole     @default(STUDENT)  
  courses       Course[]     @relation("UserCourses")  
  members       CourseMember[]  
  feedbacks     CourseFeedback[]  
  coursesAnnouncements CourseAnnouncement[]  
  bookmarks     Bookmark[]   @relation("UserBookmarks")  
  createdAt     DateTime     @default(now())  
  updatedAt     DateTime     @updatedAt  
  
  @@map("users")  
}  
  
model Course {  
  id             Int               @id @default(autoincrement())  
  name           String            @db.VarChar(255)  
  description    String            @db.Text  
  price          Int  
  image          String?           @db.VarChar(255)  
  teacher        User              @relation("UserCourses", fields: [teacherId], references: [id])  
  teacherId      Int  
  members        CourseMember[]  
  contents       CourseContent[]  
  feedbacks      CourseFeedback[]  
  announcements  CourseAnnouncement[]  
  categoryId     Int?  
  category       CourseCategory?   @relation(fields: [categoryId], references: [id])  
  bookmarks      Bookmark[]       @relation("CourseBookmarks")  
  createdAt      DateTime          @default(now())  
  updatedAt      DateTime          @updatedAt  
  
  @@map("courses")  
  @@index([teacherId])  
}  
  
model CourseMember {  
  id            Int        @id @default(autoincrement())  
  course        Course     @relation(fields: [courseId], references: [id])  
  courseId      Int  
  user          User       @relation(fields: [userId], references: [id])  
  userId        Int  
  roles         String     @db.VarChar(10)  
  comments      Comment[]  
  completions   CompletionTracking[]  
  createdAt     DateTime   @default(now())  
  updatedAt     DateTime   @updatedAt  
  
  @@map("course_members")  
  @@index([courseId, userId], name: "course_user_idx")  
}  
  
model CourseContent {  
  id               Int               @id @default(autoincrement())  
  name             String            @db.VarChar(200)  
  description      String            @db.Text  
  videoUrl         String?           @db.VarChar(200)  
  fileAttachment   String?           @db.VarChar(255)  
  course           Course            @relation(fields: [courseId], references: [id])  
  courseId         Int  
  parentContent    CourseContent?    @relation("ContentParent", fields: [parentId], references: [id])  
  parentId         Int?  
  childContents    CourseContent[]   @relation("ContentParent")  
  comments         Comment[]  
  completions      CompletionTracking[]  
  bookmarks        Bookmark[]         @relation("ContentBookmarks")  
  createdAt        DateTime  @default(now())  
  updatedAt        DateTime  @updatedAt  
  
  @@map("course_contents")  
  @@index([courseId])  
}  
  
model Comment {  
  id          Int          @id @default(autoincrement())  
  content     CourseContent @relation(fields: [contentId], references: [id])  
  contentId   Int  
  member      CourseMember  @relation(fields: [memberId], references: [id])  
  memberId    Int  
  comment     String        @db.Text  
  createdAt   DateTime      @default(now())  
  updatedAt   DateTime      @updatedAt  
  
  @@map("comments")  
  @@index([contentId])  
  @@index([memberId])  
}  
  
model CompletionTracking {  
  id          Int          @id @default(autoincrement())  
  member      CourseMember @relation(fields: [memberId], references: [id])  
  memberId    Int  
  content     CourseContent @relation(fields: [contentId], references: [id])  
  contentId   Int  
  createdAt   DateTime     @default(now())  
  
  @@map("completion_tracking")  
}  
  
model CourseFeedback {  
  id          Int     @id @default(autoincrement())  
  course      Course  @relation(fields: [courseId], references: [id])  
  courseId    Int  
  user        User    @relation(fields: [userId], references: [id])  
  userId      Int  
  feedback    String  @db.Text  
  createdAt   DateTime     @default(now())  
  updatedAt   DateTime     @updatedAt  
  
  @@map("course_feedbacks")  
}  
  
model CourseCategory {  
  id          Int        @id @default(autoincrement())  
  name        String     @db.VarChar(100)  
  courses     Course[]  
  createdAt   DateTime   @default(now())  
  
  @@map("course_categories")  
}  
  
model CourseAnnouncement {  
  id            Int       @id @default(autoincrement())  
  course        Course    @relation(fields: [courseId], references: [id])  
  courseId      Int  
  teacher       User      @relation(fields: [teacherId], references: [id])  
  teacherId     Int  
  title         String    @db.VarChar(100)  
  message       String    @db.Text  
  createdAt     DateTime  @default(now())  
  updatedAt     DateTime  @updatedAt  
  
  @@map("course_announcements")  
}  
  
model Bookmark {  
  id            Int          @id @default(autoincrement())  
  user          User         @relation("UserBookmarks", fields: [userId], references: [id])  
  userId        Int  
  courseContent CourseContent @relation("ContentBookmarks", fields: [courseContentId], references: [id])  
  courseContentId Int  
  course        Course       @relation("CourseBookmarks", fields: [courseId], references: [id])  
  courseId      Int  
  createdAt     DateTime     @default(now())  
  
  @@map("bookmarks")  
  @@index([userId, courseContentId], name: "user_content_idx")  
}  
